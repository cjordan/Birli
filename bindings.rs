/* automatically generated by rust-bindgen 0.57.0 */

pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
pub type std_true_type = u8;
pub type std_string = [u64; 3usize];
pub type std___pointer_type_imp___pointer_type_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___pointer_type {
    pub _address: u8,
}
pub type std___pointer_type_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_ptr_deleter_sfinae {
    pub _address: u8,
}
pub type std___unique_ptr_deleter_sfinae___lval_ref_type<_Deleter> = *const _Deleter;
pub type std___unique_ptr_deleter_sfinae___good_rval_ref_type<_Deleter> = *mut _Deleter;
pub type std___unique_ptr_deleter_sfinae___enable_rval_overload = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr {
    pub _address: u8,
}
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr_pointer = std___pointer_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr___nat {
    pub __for_bool_: ::std::os::raw::c_int,
}
pub type std_unique_ptr__DeleterSFINAE = std___unique_ptr_deleter_sfinae;
pub type std_unique_ptr__LValRefType = u8;
pub type std_unique_ptr__GoodRValRefType = u8;
pub type std_unique_ptr__BadRValRefType = u8;
pub type std_unique_ptr__EnableIfDeleterDefaultConstructible = u8;
pub type std_unique_ptr__EnableIfDeleterConstructible = u8;
pub type std_unique_ptr__EnableIfMoveConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterAssignable = u8;
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_exception>(),
        8usize,
        concat!("Size of: ", stringify!(std_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(std_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type size_t = __darwin_size_t;
pub const aoflagger_TelescopeId_GENERIC_TELESCOPE: aoflagger_TelescopeId = 0;
pub const aoflagger_TelescopeId_AARTFAAC_TELESCOPE: aoflagger_TelescopeId = 1;
pub const aoflagger_TelescopeId_APERTIF_TELESCOPE: aoflagger_TelescopeId = 2;
pub const aoflagger_TelescopeId_ARECIBO_TELESCOPE: aoflagger_TelescopeId = 3;
pub const aoflagger_TelescopeId_BIGHORNS_TELESCOPE: aoflagger_TelescopeId = 4;
pub const aoflagger_TelescopeId_JVLA_TELESCOPE: aoflagger_TelescopeId = 5;
pub const aoflagger_TelescopeId_LOFAR_TELESCOPE: aoflagger_TelescopeId = 6;
pub const aoflagger_TelescopeId_MWA_TELESCOPE: aoflagger_TelescopeId = 7;
pub const aoflagger_TelescopeId_PARKES_TELESCOPE: aoflagger_TelescopeId = 8;
pub const aoflagger_TelescopeId_WSRT_TELESCOPE: aoflagger_TelescopeId = 9;
pub type aoflagger_TelescopeId = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct aoflagger_ImageSet {
    pub _data: u64,
}
#[test]
fn bindgen_test_layout_aoflagger_ImageSet() {
    assert_eq!(
        ::std::mem::size_of::<aoflagger_ImageSet>(),
        8usize,
        concat!("Size of: ", stringify!(aoflagger_ImageSet))
    );
    assert_eq!(
        ::std::mem::align_of::<aoflagger_ImageSet>(),
        8usize,
        concat!("Alignment of ", stringify!(aoflagger_ImageSet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aoflagger_ImageSet>()))._data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aoflagger_ImageSet),
            "::",
            stringify!(_data)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8ImageSet11ImageBufferEm"]
    pub fn aoflagger_ImageSet_ImageBuffer(
        this: *mut aoflagger_ImageSet,
        imageIndex: size_t,
    ) -> *mut f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8ImageSet11ImageBufferEm"]
    pub fn aoflagger_ImageSet_ImageBuffer1(
        this: *const aoflagger_ImageSet,
        imageIndex: size_t,
    ) -> *const f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8ImageSet5WidthEv"]
    pub fn aoflagger_ImageSet_Width(this: *const aoflagger_ImageSet) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8ImageSet6HeightEv"]
    pub fn aoflagger_ImageSet_Height(this: *const aoflagger_ImageSet) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8ImageSet10ImageCountEv"]
    pub fn aoflagger_ImageSet_ImageCount(this: *const aoflagger_ImageSet) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8ImageSet16HorizontalStrideEv"]
    pub fn aoflagger_ImageSet_HorizontalStride(this: *const aoflagger_ImageSet) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8ImageSet3SetEf"]
    pub fn aoflagger_ImageSet_Set(this: *mut aoflagger_ImageSet, newValue: f32);
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8ImageSet25ResizeWithoutReallocationEm"]
    pub fn aoflagger_ImageSet_ResizeWithoutReallocation(
        this: *const aoflagger_ImageSet,
        newWidth: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8ImageSetC1Ev"]
    pub fn aoflagger_ImageSet_ImageSet(this: *mut aoflagger_ImageSet);
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8ImageSetC1ERKS0_"]
    pub fn aoflagger_ImageSet_ImageSet1(
        this: *mut aoflagger_ImageSet,
        sourceImageSet: *const aoflagger_ImageSet,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8ImageSetC1EOS0_"]
    pub fn aoflagger_ImageSet_ImageSet2(
        this: *mut aoflagger_ImageSet,
        sourceImageSet: *mut aoflagger_ImageSet,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8ImageSetD1Ev"]
    pub fn aoflagger_ImageSet_ImageSet_destructor(this: *mut aoflagger_ImageSet);
}
impl aoflagger_ImageSet {
    #[inline]
    pub unsafe fn ImageBuffer(&mut self, imageIndex: size_t) -> *mut f32 {
        aoflagger_ImageSet_ImageBuffer(self, imageIndex)
    }
    #[inline]
    pub unsafe fn ImageBuffer1(&self, imageIndex: size_t) -> *const f32 {
        aoflagger_ImageSet_ImageBuffer1(self, imageIndex)
    }
    #[inline]
    pub unsafe fn Width(&self) -> size_t {
        aoflagger_ImageSet_Width(self)
    }
    #[inline]
    pub unsafe fn Height(&self) -> size_t {
        aoflagger_ImageSet_Height(self)
    }
    #[inline]
    pub unsafe fn ImageCount(&self) -> size_t {
        aoflagger_ImageSet_ImageCount(self)
    }
    #[inline]
    pub unsafe fn HorizontalStride(&self) -> size_t {
        aoflagger_ImageSet_HorizontalStride(self)
    }
    #[inline]
    pub unsafe fn Set(&mut self, newValue: f32) {
        aoflagger_ImageSet_Set(self, newValue)
    }
    #[inline]
    pub unsafe fn ResizeWithoutReallocation(&self, newWidth: size_t) {
        aoflagger_ImageSet_ResizeWithoutReallocation(self, newWidth)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_ImageSet_ImageSet(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(sourceImageSet: *const aoflagger_ImageSet) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_ImageSet_ImageSet1(__bindgen_tmp.as_mut_ptr(), sourceImageSet);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(sourceImageSet: *mut aoflagger_ImageSet) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_ImageSet_ImageSet2(__bindgen_tmp.as_mut_ptr(), sourceImageSet);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        aoflagger_ImageSet_ImageSet_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct aoflagger_FlagMask {
    pub _data: u64,
}
#[test]
fn bindgen_test_layout_aoflagger_FlagMask() {
    assert_eq!(
        ::std::mem::size_of::<aoflagger_FlagMask>(),
        8usize,
        concat!("Size of: ", stringify!(aoflagger_FlagMask))
    );
    assert_eq!(
        ::std::mem::align_of::<aoflagger_FlagMask>(),
        8usize,
        concat!("Alignment of ", stringify!(aoflagger_FlagMask))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aoflagger_FlagMask>()))._data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aoflagger_FlagMask),
            "::",
            stringify!(_data)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8FlagMask5WidthEv"]
    pub fn aoflagger_FlagMask_Width(this: *const aoflagger_FlagMask) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8FlagMask6HeightEv"]
    pub fn aoflagger_FlagMask_Height(this: *const aoflagger_FlagMask) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8FlagMask16HorizontalStrideEv"]
    pub fn aoflagger_FlagMask_HorizontalStride(this: *const aoflagger_FlagMask) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8FlagMask6BufferEv"]
    pub fn aoflagger_FlagMask_Buffer(this: *mut aoflagger_FlagMask) -> *mut bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger8FlagMask6BufferEv"]
    pub fn aoflagger_FlagMask_Buffer1(this: *const aoflagger_FlagMask) -> *const bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8FlagMaskC1Ev"]
    pub fn aoflagger_FlagMask_FlagMask(this: *mut aoflagger_FlagMask);
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8FlagMaskC1ERKS0_"]
    pub fn aoflagger_FlagMask_FlagMask1(
        this: *mut aoflagger_FlagMask,
        sourceMask: *const aoflagger_FlagMask,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8FlagMaskC1EOS0_"]
    pub fn aoflagger_FlagMask_FlagMask2(
        this: *mut aoflagger_FlagMask,
        sourceMask: *mut aoflagger_FlagMask,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8FlagMaskD1Ev"]
    pub fn aoflagger_FlagMask_FlagMask_destructor(this: *mut aoflagger_FlagMask);
}
impl aoflagger_FlagMask {
    #[inline]
    pub unsafe fn Width(&self) -> size_t {
        aoflagger_FlagMask_Width(self)
    }
    #[inline]
    pub unsafe fn Height(&self) -> size_t {
        aoflagger_FlagMask_Height(self)
    }
    #[inline]
    pub unsafe fn HorizontalStride(&self) -> size_t {
        aoflagger_FlagMask_HorizontalStride(self)
    }
    #[inline]
    pub unsafe fn Buffer(&mut self) -> *mut bool {
        aoflagger_FlagMask_Buffer(self)
    }
    #[inline]
    pub unsafe fn Buffer1(&self) -> *const bool {
        aoflagger_FlagMask_Buffer1(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_FlagMask_FlagMask(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(sourceMask: *const aoflagger_FlagMask) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_FlagMask_FlagMask1(__bindgen_tmp.as_mut_ptr(), sourceMask);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(sourceMask: *mut aoflagger_FlagMask) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_FlagMask_FlagMask2(__bindgen_tmp.as_mut_ptr(), sourceMask);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        aoflagger_FlagMask_FlagMask_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct aoflagger_Strategy {
    pub _data: u64,
    pub _aoflagger: *mut aoflagger_AOFlagger,
}
#[test]
fn bindgen_test_layout_aoflagger_Strategy() {
    assert_eq!(
        ::std::mem::size_of::<aoflagger_Strategy>(),
        16usize,
        concat!("Size of: ", stringify!(aoflagger_Strategy))
    );
    assert_eq!(
        ::std::mem::align_of::<aoflagger_Strategy>(),
        8usize,
        concat!("Alignment of ", stringify!(aoflagger_Strategy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aoflagger_Strategy>()))._data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aoflagger_Strategy),
            "::",
            stringify!(_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aoflagger_Strategy>()))._aoflagger as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aoflagger_Strategy),
            "::",
            stringify!(_aoflagger)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8Strategy3RunERKNS_8ImageSetE"]
    pub fn aoflagger_Strategy_Run(
        this: *mut aoflagger_Strategy,
        input: *const aoflagger_ImageSet,
    ) -> aoflagger_FlagMask;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8Strategy3RunERKNS_8ImageSetERKNS_8FlagMaskE"]
    pub fn aoflagger_Strategy_Run1(
        this: *mut aoflagger_Strategy,
        input: *const aoflagger_ImageSet,
        existingFlags: *const aoflagger_FlagMask,
    ) -> aoflagger_FlagMask;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8StrategyC1Ev"]
    pub fn aoflagger_Strategy_Strategy(this: *mut aoflagger_Strategy);
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8StrategyC1EOS0_"]
    pub fn aoflagger_Strategy_Strategy1(
        this: *mut aoflagger_Strategy,
        sourceStrategy: *mut aoflagger_Strategy,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger8StrategyD1Ev"]
    pub fn aoflagger_Strategy_Strategy_destructor(this: *mut aoflagger_Strategy);
}
impl aoflagger_Strategy {
    #[inline]
    pub unsafe fn Run(&mut self, input: *const aoflagger_ImageSet) -> aoflagger_FlagMask {
        aoflagger_Strategy_Run(self, input)
    }
    #[inline]
    pub unsafe fn Run1(
        &mut self,
        input: *const aoflagger_ImageSet,
        existingFlags: *const aoflagger_FlagMask,
    ) -> aoflagger_FlagMask {
        aoflagger_Strategy_Run1(self, input, existingFlags)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_Strategy_Strategy(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(sourceStrategy: *mut aoflagger_Strategy) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_Strategy_Strategy1(__bindgen_tmp.as_mut_ptr(), sourceStrategy);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        aoflagger_Strategy_Strategy_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct aoflagger_QualityStatistics {
    pub _data: u64,
}
#[test]
fn bindgen_test_layout_aoflagger_QualityStatistics() {
    assert_eq!(
        ::std::mem::size_of::<aoflagger_QualityStatistics>(),
        8usize,
        concat!("Size of: ", stringify!(aoflagger_QualityStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<aoflagger_QualityStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(aoflagger_QualityStatistics))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<aoflagger_QualityStatistics>()))._data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aoflagger_QualityStatistics),
            "::",
            stringify!(_data)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger17QualityStatistics17CollectStatisticsERKNS_8ImageSetERKNS_8FlagMaskES6_mm"]
    pub fn aoflagger_QualityStatistics_CollectStatistics(
        this: *mut aoflagger_QualityStatistics,
        imageSet: *const aoflagger_ImageSet,
        rfiFlags: *const aoflagger_FlagMask,
        correlatorFlags: *const aoflagger_FlagMask,
        antenna1: size_t,
        antenna2: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK9aoflagger17QualityStatistics15WriteStatisticsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"]
    pub fn aoflagger_QualityStatistics_WriteStatistics(
        this: *const aoflagger_QualityStatistics,
        measurementSetPath: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger17QualityStatisticsC1Ev"]
    pub fn aoflagger_QualityStatistics_QualityStatistics(this: *mut aoflagger_QualityStatistics);
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger17QualityStatisticsC1ERKS0_"]
    pub fn aoflagger_QualityStatistics_QualityStatistics1(
        this: *mut aoflagger_QualityStatistics,
        sourceQS: *const aoflagger_QualityStatistics,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger17QualityStatisticsC1EOS0_"]
    pub fn aoflagger_QualityStatistics_QualityStatistics2(
        this: *mut aoflagger_QualityStatistics,
        sourceQS: *mut aoflagger_QualityStatistics,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger17QualityStatisticsD1Ev"]
    pub fn aoflagger_QualityStatistics_QualityStatistics_destructor(
        this: *mut aoflagger_QualityStatistics,
    );
}
impl aoflagger_QualityStatistics {
    #[inline]
    pub unsafe fn CollectStatistics(
        &mut self,
        imageSet: *const aoflagger_ImageSet,
        rfiFlags: *const aoflagger_FlagMask,
        correlatorFlags: *const aoflagger_FlagMask,
        antenna1: size_t,
        antenna2: size_t,
    ) {
        aoflagger_QualityStatistics_CollectStatistics(
            self,
            imageSet,
            rfiFlags,
            correlatorFlags,
            antenna1,
            antenna2,
        )
    }
    #[inline]
    pub unsafe fn WriteStatistics(&self, measurementSetPath: *const std_string) {
        aoflagger_QualityStatistics_WriteStatistics(self, measurementSetPath)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_QualityStatistics_QualityStatistics(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(sourceQS: *const aoflagger_QualityStatistics) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_QualityStatistics_QualityStatistics1(__bindgen_tmp.as_mut_ptr(), sourceQS);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(sourceQS: *mut aoflagger_QualityStatistics) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        aoflagger_QualityStatistics_QualityStatistics2(__bindgen_tmp.as_mut_ptr(), sourceQS);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        aoflagger_QualityStatistics_QualityStatistics_destructor(self)
    }
}
#[repr(C)]
pub struct aoflagger_StatusListener__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct aoflagger_StatusListener {
    pub vtable_: *const aoflagger_StatusListener__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_aoflagger_StatusListener() {
    assert_eq!(
        ::std::mem::size_of::<aoflagger_StatusListener>(),
        8usize,
        concat!("Size of: ", stringify!(aoflagger_StatusListener))
    );
    assert_eq!(
        ::std::mem::align_of::<aoflagger_StatusListener>(),
        8usize,
        concat!("Alignment of ", stringify!(aoflagger_StatusListener))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct aoflagger_AOFlagger {
    pub _statusListener: *mut aoflagger_StatusListener,
}
#[test]
fn bindgen_test_layout_aoflagger_AOFlagger() {
    assert_eq!(
        ::std::mem::size_of::<aoflagger_AOFlagger>(),
        8usize,
        concat!("Size of: ", stringify!(aoflagger_AOFlagger))
    );
    assert_eq!(
        ::std::mem::align_of::<aoflagger_AOFlagger>(),
        8usize,
        concat!("Alignment of ", stringify!(aoflagger_AOFlagger))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<aoflagger_AOFlagger>()))._statusListener as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aoflagger_AOFlagger),
            "::",
            stringify!(_statusListener)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger9AOFlagger16FindStrategyFileENS_11TelescopeIdERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"]
    pub fn aoflagger_AOFlagger_FindStrategyFile(
        this: *mut aoflagger_AOFlagger,
        telescopeId: aoflagger_TelescopeId,
        scenario: *const std_string,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger9AOFlagger21MakeQualityStatisticsEPKdmS2_mm"]
    pub fn aoflagger_AOFlagger_MakeQualityStatistics(
        this: *mut aoflagger_AOFlagger,
        scanTimes: *const f64,
        nScans: size_t,
        channelFrequencies: *const f64,
        nChannels: size_t,
        nPolarizations: size_t,
    ) -> aoflagger_QualityStatistics;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger9AOFlagger21MakeQualityStatisticsEPKdmS2_mmb"]
    pub fn aoflagger_AOFlagger_MakeQualityStatistics1(
        this: *mut aoflagger_AOFlagger,
        scanTimes: *const f64,
        nScans: size_t,
        channelFrequencies: *const f64,
        nChannels: size_t,
        nPolarizations: size_t,
        computeHistograms: bool,
    ) -> aoflagger_QualityStatistics;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger9AOFlagger16GetVersionStringEv"]
    pub fn aoflagger_AOFlagger_GetVersionString() -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger9AOFlagger10GetVersionERsS1_S1_"]
    pub fn aoflagger_AOFlagger_GetVersion(
        major: *mut ::std::os::raw::c_short,
        minor: *mut ::std::os::raw::c_short,
        subMinor: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN9aoflagger9AOFlagger14GetVersionDateEv"]
    pub fn aoflagger_AOFlagger_GetVersionDate() -> std_string;
}
impl aoflagger_AOFlagger {
    #[inline]
    pub unsafe fn FindStrategyFile(
        &mut self,
        telescopeId: aoflagger_TelescopeId,
        scenario: *const std_string,
    ) -> std_string {
        aoflagger_AOFlagger_FindStrategyFile(self, telescopeId, scenario)
    }
    #[inline]
    pub unsafe fn MakeQualityStatistics(
        &mut self,
        scanTimes: *const f64,
        nScans: size_t,
        channelFrequencies: *const f64,
        nChannels: size_t,
        nPolarizations: size_t,
    ) -> aoflagger_QualityStatistics {
        aoflagger_AOFlagger_MakeQualityStatistics(
            self,
            scanTimes,
            nScans,
            channelFrequencies,
            nChannels,
            nPolarizations,
        )
    }
    #[inline]
    pub unsafe fn MakeQualityStatistics1(
        &mut self,
        scanTimes: *const f64,
        nScans: size_t,
        channelFrequencies: *const f64,
        nChannels: size_t,
        nPolarizations: size_t,
        computeHistograms: bool,
    ) -> aoflagger_QualityStatistics {
        aoflagger_AOFlagger_MakeQualityStatistics1(
            self,
            scanTimes,
            nScans,
            channelFrequencies,
            nChannels,
            nPolarizations,
            computeHistograms,
        )
    }
    #[inline]
    pub unsafe fn GetVersionString() -> std_string {
        aoflagger_AOFlagger_GetVersionString()
    }
    #[inline]
    pub unsafe fn GetVersion(
        major: *mut ::std::os::raw::c_short,
        minor: *mut ::std::os::raw::c_short,
        subMinor: *mut ::std::os::raw::c_short,
    ) {
        aoflagger_AOFlagger_GetVersion(major, minor, subMinor)
    }
    #[inline]
    pub unsafe fn GetVersionDate() -> std_string {
        aoflagger_AOFlagger_GetVersionDate()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageSetData {
    _unused: [u8; 0],
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_ImageSetData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlagMaskData {
    _unused: [u8; 0],
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_FlagMaskData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StrategyData {
    _unused: [u8; 0],
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_StrategyData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QualityStatisticsData {
    _unused: [u8; 0],
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_QualityStatisticsData_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
